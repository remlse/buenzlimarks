//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "bookmarks")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i64,
    pub name: String,
    pub url: String,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn before_save(mut self, _: bool) -> Result<Self, DbErr> {
        use sea_orm::ActiveValue::Set;

        if !self.url.as_ref().starts_with("http") {
            self.url = Set(format!("https://{}", self.url.as_ref()));
        }

        Ok(self)
    }
}

impl ActiveModel {
    pub fn new_from_json(json: serde_json::Value) -> Result<Self, DbErr> {
        let mut model = Self::new();
        model.set_from_json(json)?;
        Ok(model)
    }
    pub fn from_id_and_json(id: i64, json: serde_json::Value) -> Result<Self, DbErr> {
        let mut model = Self {
            id: sea_orm::ActiveValue::Set(id),
            ..<Self as ActiveModelTrait>::default()
        };
        model.set_from_json(json)?;
        Ok(model)
    }
}
